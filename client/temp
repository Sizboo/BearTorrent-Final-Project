 async fn hole_punch(&mut self, peer_addr: SocketAddr ) -> Result<UdpSocket, Box<dyn std::error::Error>> {
        
        //todo maybe don't take this here
        let socket_arc = Arc::new(self.socket.take().unwrap());
        let socket_clone = socket_arc.clone();
        let cancel_token = CancellationToken::new();
        let token_clone = cancel_token.clone();

        let punch_string = b"HELPFUL_SERF";

        println!("Starting Send to peer ip: {}, port: {}", peer_addr.ip(), peer_addr.port());
        
        let send_task = tokio::spawn(async move {
            for i in 0..50 {
                let res = socket_arc.send_to(punch_string, peer_addr).await;
                
                if res.is_err() {
                    println!("Send Failed: {}", res.err().unwrap());
                }
                
                if token_clone.is_cancelled() {
                    println!("Send Cancelled");
                    return Ok(socket_arc);
                }
                
                sleep(Duration::from_millis(10)).await;
            }
            Err(Box::<dyn std::error::Error + Send + Sync>::from("send task finished without succeeding"))
        });


        let read_task = tokio::spawn( async move {
            let mut recv_buf = [0u8; 1024];
            loop {
                match socket_clone.recv_from(&mut recv_buf).await {
                    Ok((n, src)) => {
                        println!("Received from {}: {:?}", src, &recv_buf[..n]);
                        if &recv_buf[..n] == punch_string {
                            // println!("Punched SUCCESS {}", src);
                            
                            cancel_token.cancel();
                            drop(socket_clone);
                            return Ok(());
                        }
                    }
                    Err(e) => {
                        eprintln!("Recv error: {}", e);
                        return Err(Box::<dyn std::error::Error + Send + Sync>::from(e));
                    },
                }
            }
        });

        let socket_arc = match send_task.await {
            Ok(Ok(socket)) => socket,
            Ok(Err(e)) => return Err(e),
            Err(join_err) => return Err(Box::new(join_err)),
        };

        let read_res = read_task.await?;
        match read_res {
            Ok(_) => { 
                let socket = Arc::try_unwrap(socket_arc).unwrap();
                println!("Punch Success: {:?}", socket);
                Ok(socket)
            }
            _ => { Err(Box::new(std::io::Error::new(ErrorKind::TimedOut, "hole punch timed out"))) }
        }
        
    }
