syntax = "proto3";
import "google/protobuf/empty.proto";
package connection;

service Connector {
    rpc get_file_peer_list (InfoHash) returns (PeerList);
    rpc send_file_request (FullId) returns (google.protobuf.Empty);
    rpc seed (PeerId) returns (PeerId);
    rpc await_hole_punch_trigger (PeerId) returns (google.protobuf.Empty);
    rpc init_punch (PeerId) returns (google.protobuf.Empty);
    rpc advertise (FileMessage) returns(ClientId);
    rpc register_client (ClientRegistry) returns (ClientId);
    rpc update_registered_peer_id (FullId) returns (ClientId);
    rpc init_cert_sender (PeerId) returns (google.protobuf.Empty);
    rpc get_cert (PeerId) returns (Cert);
    rpc send_cert (CertMessage) returns (google.protobuf.Empty);
    rpc get_client_id (PeerId) returns (ClientId);
    rpc get_all_files (google.protobuf.Empty) returns (FileList);
}

message Cert {
    bytes certificate = 1;
}

message CertMessage {
    PeerId peer_id = 1;
    Cert cert = 2;
}

message ClientId {
    string uid = 1;
}

message ClientRegistry {
    optional PeerId peer_id = 1;
}

message PeerId {
    uint32 ipaddr = 1;
    uint32 port = 2;
    uint32 priv_ipaddr = 3;
    uint32 priv_port = 4;
}

message FullId {
    ClientId self_id = 1;
    PeerId peer_id = 2;
}

message FileMessage {
    ClientId id = 1;
    InfoHash info_hash = 2;
}

message FileList {
    repeated InfoHash info_hashes = 1;
}

message InfoHash {
    string name = 1;
    uint64 file_length = 2;
    uint32 piece_length = 3;
    repeated PieceHash pieces  = 4;
}

message PieceHash {
    bytes hash = 1;
}

message PeerList {
    repeated PeerId list = 1;
}

message RegisterRequest {
    string session_id = 1;
    ClientId client_id  = 2;
    bool is_seeder = 3;
}

message TurnPiece {
    bytes payload = 1;
    uint32 index = 2;
}

message TurnPieceRequest {
    InfoHash hash = 1;
    uint32 index = 2;
}

message TurnPacket {
    string session_id = 1;
    ClientId target_id = 2;
    oneof body {
        TurnPiece piece = 3;
        TurnPieceRequest request = 4;
    }
}

service Turn {
    rpc register(RegisterRequest) returns (stream TurnPacket);
    rpc send(stream TurnPacket) returns (google.protobuf.Empty);
}